#!/usr/bin/env node
'use strict';

// Load modules

const Fs = require('fs');
const Path = require('path');
const Yargs = require('yargs');
const Alce = require('alce');
const Confidence = require('../');


// Declare internals

const internals = {};

internals.checkArguments = function (argv) {
    return typeof argv.indentation === 'number';
};

internals.argv = Yargs.usage('Usage: $0 -c config.json [--filter.criterion=value]')
                    .demand(['c'])
                    .option('i', {
                        alias: 'indentation',
                        default: 4
                    })
                    .check(internals.checkArguments)
                    .argv;

internals.getConfig = function () {

    const configPath = Path.resolve(internals.argv.c);

    return new Promise((resolve, reject) => {

        Fs.readFile(configPath, (err, data) => {

            if (err) {
                return reject(err);
            }
            try {
                const config = Alce.parse(data);
                return resolve(config);
            }
            catch (err) {
                return reject(err);
            }
        });
    });
};


internals.generate = async () => {

    try {
        const config = await internals.getConfig();
        const store = new Confidence.Store(config);
        const set = store.get('/', internals.argv.filter);
        const indentation = internals.argv.indentation;
    
        if (!set) {
            process.stderr.write('Failed to generate document');
        }
    
        process.stdout.write(JSON.stringify(set, null, indentation));
    }
    catch (err) {
        process.stderr.write('Failed loading configuration file: ' + internals.argv.c + ' (' + err + ')');
        process.exit(1);
    }
};

internals.generate();
